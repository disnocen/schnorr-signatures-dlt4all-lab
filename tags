!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
G	create_priv_key.py	/^G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)$/;"	v
G	schnorr-sign.py	/^G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)$/;"	v
G	schnorr-verify.py	/^G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)$/;"	v
G	schnorr.old.py	/^G=[xG,yG]$/;"	v
G	schnorr.py	/^G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)$/;"	v
Int	schnorr.old.py	/^def Int(x):$/;"	f
Point	create_priv_key.py	/^Point = Tuple[int, int]$/;"	v
Point	schnorr-sign.py	/^Point = Tuple[int, int]$/;"	v
Point	schnorr-verify.py	/^Point = Tuple[int, int]$/;"	v
Point	schnorr.py	/^Point = Tuple[int, int]$/;"	v
aux_rand	schnorr.py	/^aux_rand = bytes.fromhex(aux_rand_hex)$/;"	v
aux_rand_hex	schnorr.py	/^aux_rand_hex="0000000000000000000000000000000000000000000000000000000000000001"$/;"	v
bytes_from_int	create_priv_key.py	/^def bytes_from_int(x: int) -> bytes:$/;"	f
bytes_from_int	schnorr-sign.py	/^def bytes_from_int(x: int) -> bytes:$/;"	f
bytes_from_int	schnorr-verify.py	/^def bytes_from_int(x: int) -> bytes:$/;"	f
bytes_from_int	schnorr.py	/^def bytes_from_int(x: int) -> bytes:$/;"	f
bytes_from_point	create_priv_key.py	/^def bytes_from_point(P: Point) -> bytes:$/;"	f
bytes_from_point	schnorr-sign.py	/^def bytes_from_point(P: Point) -> bytes:$/;"	f
bytes_from_point	schnorr-verify.py	/^def bytes_from_point(P: Point) -> bytes:$/;"	f
bytes_from_point	schnorr.py	/^def bytes_from_point(P: Point) -> bytes:$/;"	f
generate_keys	schnorr.old.py	/^def generate_keys():$/;"	f
has_even_y	schnorr-sign.py	/^def has_even_y(P: Point) -> bool:$/;"	f
has_even_y	schnorr-verify.py	/^def has_even_y(P: Point) -> bool:$/;"	f
has_even_y	schnorr.py	/^def has_even_y(P: Point) -> bool:$/;"	f
has_square_y	schnorr-sign.py	/^def has_square_y(P: Optional[Point]) -> bool:$/;"	f
has_square_y	schnorr-verify.py	/^def has_square_y(P: Optional[Point]) -> bool:$/;"	f
has_square_y	schnorr.py	/^def has_square_y(P: Optional[Point]) -> bool:$/;"	f
hash_sha256	schnorr-sign.py	/^def hash_sha256(b: bytes) -> bytes:$/;"	f
hash_sha256	schnorr-verify.py	/^def hash_sha256(b: bytes) -> bytes:$/;"	f
hash_sha256	schnorr.py	/^def hash_sha256(b: bytes) -> bytes:$/;"	f
int_from_bytes	schnorr-sign.py	/^def int_from_bytes(b: bytes) -> int:$/;"	f
int_from_bytes	schnorr-verify.py	/^def int_from_bytes(b: bytes) -> int:$/;"	f
int_from_bytes	schnorr.py	/^def int_from_bytes(b: bytes) -> int:$/;"	f
inv_point	schnorr.old.py	/^def inv_point(P):$/;"	f
is_infinity	schnorr-sign.py	/^def is_infinity(P: Optional[Point]) -> bool:$/;"	f
is_infinity	schnorr-verify.py	/^def is_infinity(P: Optional[Point]) -> bool:$/;"	f
is_infinity	schnorr.py	/^def is_infinity(P: Optional[Point]) -> bool:$/;"	f
is_on_curve	schnorr.old.py	/^def is_on_curve(P,mod=p):$/;"	f
is_square	schnorr-sign.py	/^def is_square(x: int) -> bool:$/;"	f
is_square	schnorr-verify.py	/^def is_square(x: int) -> bool:$/;"	f
is_square	schnorr.py	/^def is_square(x: int) -> bool:$/;"	f
lift_x_even_y	schnorr-sign.py	/^def lift_x_even_y(b: bytes) -> Optional[Point]:$/;"	f
lift_x_even_y	schnorr-verify.py	/^def lift_x_even_y(b: bytes) -> Optional[Point]:$/;"	f
lift_x_even_y	schnorr.py	/^def lift_x_even_y(b: bytes) -> Optional[Point]:$/;"	f
lift_x_square_y	schnorr-sign.py	/^def lift_x_square_y(b: bytes) -> Optional[Point]:$/;"	f
lift_x_square_y	schnorr-verify.py	/^def lift_x_square_y(b: bytes) -> Optional[Point]:$/;"	f
lift_x_square_y	schnorr.py	/^def lift_x_square_y(b: bytes) -> Optional[Point]:$/;"	f
main	create_priv_key.py	/^def main():$/;"	f
main	schnorr-sign.py	/^def main(argv):$/;"	f
main	schnorr-verify.py	/^def main(argv):$/;"	f
msg	schnorr.py	/^msg = bytes.fromhex(msg_hex)$/;"	v
msg_hex	schnorr.py	/^msg_hex="243F6A8885A308D313198A2E03707344A4093822299F31D0082EFA98EC4E6C89"$/;"	v
n	create_priv_key.py	/^n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141$/;"	v
n	schnorr-sign.py	/^n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141$/;"	v
n	schnorr-verify.py	/^n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141$/;"	v
n	schnorr.old.py	/^n=ecdsa.curves.SECP256k1.generator.order()$/;"	v
n	schnorr.py	/^n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141$/;"	v
p	create_priv_key.py	/^p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F$/;"	v
p	schnorr-sign.py	/^p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F$/;"	v
p	schnorr-verify.py	/^p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F$/;"	v
p	schnorr.old.py	/^p=ecdsa.SECP256k1.curve.p()$/;"	v
p	schnorr.py	/^p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F$/;"	v
point_add	create_priv_key.py	/^def point_add(P1: Optional[Point], P2: Optional[Point]) -> Optional[Point]:$/;"	f
point_add	schnorr-sign.py	/^def point_add(P1: Optional[Point], P2: Optional[Point]) -> Optional[Point]:$/;"	f
point_add	schnorr-verify.py	/^def point_add(P1: Optional[Point], P2: Optional[Point]) -> Optional[Point]:$/;"	f
point_add	schnorr.py	/^def point_add(P1: Optional[Point], P2: Optional[Point]) -> Optional[Point]:$/;"	f
point_mul	create_priv_key.py	/^def point_mul(P: Optional[Point], n: int) -> Optional[Point]:$/;"	f
point_mul	schnorr-sign.py	/^def point_mul(P: Optional[Point], n: int) -> Optional[Point]:$/;"	f
point_mul	schnorr-verify.py	/^def point_mul(P: Optional[Point], n: int) -> Optional[Point]:$/;"	f
point_mul	schnorr.py	/^def point_mul(P: Optional[Point], n: int) -> Optional[Point]:$/;"	f
point_sum	schnorr.old.py	/^def point_sum(P,Q):$/;"	f
pubkey	schnorr.py	/^pubkey = bytes.fromhex(pubkey_hex)$/;"	v
pubkey_gen	create_priv_key.py	/^def pubkey_gen(seckey: int) -> bytes:$/;"	f
pubkey_gen	schnorr-sign.py	/^def pubkey_gen(seckey: bytes) -> bytes:$/;"	f
pubkey_gen	schnorr-verify.py	/^def pubkey_gen(seckey: bytes) -> bytes:$/;"	f
pubkey_gen	schnorr.py	/^def pubkey_gen(seckey: bytes) -> bytes:$/;"	f
pubkey_gen_from_hex	schnorr-sign.py	/^def pubkey_gen_from_hex(seckey: hex) -> bytes:$/;"	f
pubkey_gen_from_int	schnorr-sign.py	/^def pubkey_gen_from_int(seckey: int) -> bytes:$/;"	f
pubkey_hex	schnorr.py	/^pubkey_hex="DFF1D77F2A671C5F36183726DB2341BE58FEAE1DA2DECED843240F7B502BA659"$/;"	v
schnorr_sign	schnorr-sign.py	/^def schnorr_sign(msg: bytes, seckey: bytes, aux_rand: bytes) -> bytes:$/;"	f
schnorr_sign	schnorr-verify.py	/^def schnorr_sign(msg: bytes, seckey: bytes, aux_rand: bytes) -> bytes:$/;"	f
schnorr_sign	schnorr.py	/^def schnorr_sign(msg: bytes, seckey: bytes, aux_rand: bytes) -> bytes:$/;"	f
schnorr_verify	schnorr-sign.py	/^def schnorr_verify(msg: bytes, pubkey: bytes, sig: bytes) -> bool:$/;"	f
schnorr_verify	schnorr-verify.py	/^def schnorr_verify(msg: bytes, pubkey: bytes, sig: bytes) -> bool:$/;"	f
schnorr_verify	schnorr.py	/^def schnorr_verify(msg: bytes, pubkey: bytes, sig: bytes) -> bool:$/;"	f
seckey	schnorr.py	/^seckey = bytes.fromhex(seckey_hex)$/;"	v
seckey_hex	schnorr.py	/^seckey_hex = "B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF"$/;"	v
sig	schnorr.py	/^sig = bytes.fromhex(sig_hex)$/;"	v
sig_actual	schnorr.py	/^sig_actual = schnorr_sign(msg, seckey, aux_rand)$/;"	v
sig_hex	schnorr.py	/^sig_hex="0E12B8C520948A776753A96F21ABD7FDC2D7D0C0DDC90851BE17B04E75EF86A47EF0DA46C4DC4D0D1BCB8668C2CE16C54C7C23A6716EDE303AF86774917CF928"$/;"	v
tagged_hash	schnorr-sign.py	/^def tagged_hash(tag: str, msg: bytes) -> bytes:$/;"	f
tagged_hash	schnorr-verify.py	/^def tagged_hash(tag: str, msg: bytes) -> bytes:$/;"	f
tagged_hash	schnorr.py	/^def tagged_hash(tag: str, msg: bytes) -> bytes:$/;"	f
x	create_priv_key.py	/^def x(P: Point) -> int:$/;"	f
x	schnorr-sign.py	/^def x(P: Point) -> int:$/;"	f
x	schnorr-verify.py	/^def x(P: Point) -> int:$/;"	f
x	schnorr.py	/^def x(P: Point) -> int:$/;"	f
xG	schnorr.old.py	/^xG=ecdsa.curves.SECP256k1.generator.x()$/;"	v
xor_bytes	schnorr-sign.py	/^def xor_bytes(b0: bytes, b1: bytes) -> bytes:$/;"	f
xor_bytes	schnorr-verify.py	/^def xor_bytes(b0: bytes, b1: bytes) -> bytes:$/;"	f
xor_bytes	schnorr.py	/^def xor_bytes(b0: bytes, b1: bytes) -> bytes:$/;"	f
y	create_priv_key.py	/^def y(P: Point) -> int:$/;"	f
y	schnorr-sign.py	/^def y(P: Point) -> int:$/;"	f
y	schnorr-verify.py	/^def y(P: Point) -> int:$/;"	f
y	schnorr.py	/^def y(P: Point) -> int:$/;"	f
yG	schnorr.old.py	/^yG=ecdsa.curves.SECP256k1.generator.y()$/;"	v
